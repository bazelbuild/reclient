// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.1
// source: api/scandeps/cppscandeps.proto

package scandeps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CPPProcessInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command   []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	Filename  string   `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Directory string   `protobuf:"bytes,3,opt,name=directory,proto3" json:"directory,omitempty"`
	CmdEnv    []string `protobuf:"bytes,4,rep,name=cmd_env,json=cmdEnv,proto3" json:"cmd_env,omitempty"`
	ExecId    string   `protobuf:"bytes,5,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
}

func (x *CPPProcessInputsRequest) Reset() {
	*x = CPPProcessInputsRequest{}
	mi := &file_api_scandeps_cppscandeps_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPPProcessInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPPProcessInputsRequest) ProtoMessage() {}

func (x *CPPProcessInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_scandeps_cppscandeps_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPPProcessInputsRequest.ProtoReflect.Descriptor instead.
func (*CPPProcessInputsRequest) Descriptor() ([]byte, []int) {
	return file_api_scandeps_cppscandeps_proto_rawDescGZIP(), []int{0}
}

func (x *CPPProcessInputsRequest) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CPPProcessInputsRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *CPPProcessInputsRequest) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *CPPProcessInputsRequest) GetCmdEnv() []string {
	if x != nil {
		return x.CmdEnv
	}
	return nil
}

func (x *CPPProcessInputsRequest) GetExecId() string {
	if x != nil {
		return x.ExecId
	}
	return ""
}

type CPPProcessInputsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dependencies []string `protobuf:"bytes,1,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	UsedCache    bool     `protobuf:"varint,2,opt,name=used_cache,json=usedCache,proto3" json:"used_cache,omitempty"`
	Error        string   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CPPProcessInputsResponse) Reset() {
	*x = CPPProcessInputsResponse{}
	mi := &file_api_scandeps_cppscandeps_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPPProcessInputsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPPProcessInputsResponse) ProtoMessage() {}

func (x *CPPProcessInputsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_scandeps_cppscandeps_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPPProcessInputsResponse.ProtoReflect.Descriptor instead.
func (*CPPProcessInputsResponse) Descriptor() ([]byte, []int) {
	return file_api_scandeps_cppscandeps_proto_rawDescGZIP(), []int{1}
}

func (x *CPPProcessInputsResponse) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *CPPProcessInputsResponse) GetUsedCache() bool {
	if x != nil {
		return x.UsedCache
	}
	return false
}

func (x *CPPProcessInputsResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string               `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Uptime               *durationpb.Duration `protobuf:"bytes,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	CompletedActions     int32                `protobuf:"varint,4,opt,name=completed_actions,json=completedActions,proto3" json:"completed_actions,omitempty"`
	RunningActions       int32                `protobuf:"varint,5,opt,name=running_actions,json=runningActions,proto3" json:"running_actions,omitempty"`
	LongestCurrentAction *durationpb.Duration `protobuf:"bytes,6,opt,name=longest_current_action,json=longestCurrentAction,proto3" json:"longest_current_action,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_api_scandeps_cppscandeps_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_scandeps_cppscandeps_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_api_scandeps_cppscandeps_proto_rawDescGZIP(), []int{2}
}

func (x *StatusResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatusResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StatusResponse) GetUptime() *durationpb.Duration {
	if x != nil {
		return x.Uptime
	}
	return nil
}

func (x *StatusResponse) GetCompletedActions() int32 {
	if x != nil {
		return x.CompletedActions
	}
	return 0
}

func (x *StatusResponse) GetRunningActions() int32 {
	if x != nil {
		return x.RunningActions
	}
	return 0
}

func (x *StatusResponse) GetLongestCurrentAction() *durationpb.Duration {
	if x != nil {
		return x.LongestCurrentAction
	}
	return nil
}

type CapabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Caching            bool `protobuf:"varint,1,opt,name=caching,proto3" json:"caching,omitempty"`
	ExpectsResourceDir bool `protobuf:"varint,2,opt,name=expects_resource_dir,json=expectsResourceDir,proto3" json:"expects_resource_dir,omitempty"`
}

func (x *CapabilitiesResponse) Reset() {
	*x = CapabilitiesResponse{}
	mi := &file_api_scandeps_cppscandeps_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilitiesResponse) ProtoMessage() {}

func (x *CapabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_scandeps_cppscandeps_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilitiesResponse.ProtoReflect.Descriptor instead.
func (*CapabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_api_scandeps_cppscandeps_proto_rawDescGZIP(), []int{3}
}

func (x *CapabilitiesResponse) GetCaching() bool {
	if x != nil {
		return x.Caching
	}
	return false
}

func (x *CapabilitiesResponse) GetExpectsResourceDir() bool {
	if x != nil {
		return x.ExpectsResourceDir
	}
	return false
}

var File_api_scandeps_cppscandeps_proto protoreflect.FileDescriptor

var file_api_scandeps_cppscandeps_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x64, 0x65, 0x70, 0x73, 0x2f, 0x63,
	0x70, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x64, 0x65, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x64, 0x65, 0x70, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x17, 0x43, 0x50, 0x50, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x5f, 0x65,
	0x6e, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6d, 0x64, 0x45, 0x6e, 0x76,
	0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x78, 0x65, 0x63, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x18, 0x43, 0x50, 0x50,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x98,
	0x02, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x16, 0x6c, 0x6f, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x14, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x72, 0x32, 0xb2, 0x02,
	0x0a, 0x0e, 0x43, 0x50, 0x50, 0x44, 0x65, 0x70, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x12, 0x58, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x21, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x64, 0x65, 0x70, 0x73, 0x2e, 0x43, 0x50, 0x50,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x64, 0x65, 0x70, 0x73, 0x2e,
	0x43, 0x50, 0x50, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x73,
	0x63, 0x61, 0x6e, 0x64, 0x65, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x73,
	0x63, 0x61, 0x6e, 0x64, 0x65, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1e, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x64, 0x65, 0x70, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x62, 0x61, 0x7a, 0x65, 0x6c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x72, 0x65, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x64, 0x65, 0x70,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_scandeps_cppscandeps_proto_rawDescOnce sync.Once
	file_api_scandeps_cppscandeps_proto_rawDescData = file_api_scandeps_cppscandeps_proto_rawDesc
)

func file_api_scandeps_cppscandeps_proto_rawDescGZIP() []byte {
	file_api_scandeps_cppscandeps_proto_rawDescOnce.Do(func() {
		file_api_scandeps_cppscandeps_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_scandeps_cppscandeps_proto_rawDescData)
	})
	return file_api_scandeps_cppscandeps_proto_rawDescData
}

var file_api_scandeps_cppscandeps_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_api_scandeps_cppscandeps_proto_goTypes = []any{
	(*CPPProcessInputsRequest)(nil),  // 0: scandeps.CPPProcessInputsRequest
	(*CPPProcessInputsResponse)(nil), // 1: scandeps.CPPProcessInputsResponse
	(*StatusResponse)(nil),           // 2: scandeps.StatusResponse
	(*CapabilitiesResponse)(nil),     // 3: scandeps.CapabilitiesResponse
	(*durationpb.Duration)(nil),      // 4: google.protobuf.Duration
	(*emptypb.Empty)(nil),            // 5: google.protobuf.Empty
}
var file_api_scandeps_cppscandeps_proto_depIdxs = []int32{
	4, // 0: scandeps.StatusResponse.uptime:type_name -> google.protobuf.Duration
	4, // 1: scandeps.StatusResponse.longest_current_action:type_name -> google.protobuf.Duration
	0, // 2: scandeps.CPPDepsScanner.ProcessInputs:input_type -> scandeps.CPPProcessInputsRequest
	5, // 3: scandeps.CPPDepsScanner.Status:input_type -> google.protobuf.Empty
	5, // 4: scandeps.CPPDepsScanner.Shutdown:input_type -> google.protobuf.Empty
	5, // 5: scandeps.CPPDepsScanner.Capabilities:input_type -> google.protobuf.Empty
	1, // 6: scandeps.CPPDepsScanner.ProcessInputs:output_type -> scandeps.CPPProcessInputsResponse
	2, // 7: scandeps.CPPDepsScanner.Status:output_type -> scandeps.StatusResponse
	2, // 8: scandeps.CPPDepsScanner.Shutdown:output_type -> scandeps.StatusResponse
	3, // 9: scandeps.CPPDepsScanner.Capabilities:output_type -> scandeps.CapabilitiesResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_api_scandeps_cppscandeps_proto_init() }
func file_api_scandeps_cppscandeps_proto_init() {
	if File_api_scandeps_cppscandeps_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_scandeps_cppscandeps_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_scandeps_cppscandeps_proto_goTypes,
		DependencyIndexes: file_api_scandeps_cppscandeps_proto_depIdxs,
		MessageInfos:      file_api_scandeps_cppscandeps_proto_msgTypes,
	}.Build()
	File_api_scandeps_cppscandeps_proto = out.File
	file_api_scandeps_cppscandeps_proto_rawDesc = nil
	file_api_scandeps_cppscandeps_proto_goTypes = nil
	file_api_scandeps_cppscandeps_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CPPDepsScannerClient is the client API for CPPDepsScanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CPPDepsScannerClient interface {
	ProcessInputs(ctx context.Context, in *CPPProcessInputsRequest, opts ...grpc.CallOption) (*CPPProcessInputsResponse, error)
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	Capabilities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CapabilitiesResponse, error)
}

type cPPDepsScannerClient struct {
	cc grpc.ClientConnInterface
}

func NewCPPDepsScannerClient(cc grpc.ClientConnInterface) CPPDepsScannerClient {
	return &cPPDepsScannerClient{cc}
}

func (c *cPPDepsScannerClient) ProcessInputs(ctx context.Context, in *CPPProcessInputsRequest, opts ...grpc.CallOption) (*CPPProcessInputsResponse, error) {
	out := new(CPPProcessInputsResponse)
	err := c.cc.Invoke(ctx, "/scandeps.CPPDepsScanner/ProcessInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPPDepsScannerClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/scandeps.CPPDepsScanner/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPPDepsScannerClient) Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/scandeps.CPPDepsScanner/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPPDepsScannerClient) Capabilities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CapabilitiesResponse, error) {
	out := new(CapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/scandeps.CPPDepsScanner/Capabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CPPDepsScannerServer is the server API for CPPDepsScanner service.
type CPPDepsScannerServer interface {
	ProcessInputs(context.Context, *CPPProcessInputsRequest) (*CPPProcessInputsResponse, error)
	Status(context.Context, *emptypb.Empty) (*StatusResponse, error)
	Shutdown(context.Context, *emptypb.Empty) (*StatusResponse, error)
	Capabilities(context.Context, *emptypb.Empty) (*CapabilitiesResponse, error)
}

// UnimplementedCPPDepsScannerServer can be embedded to have forward compatible implementations.
type UnimplementedCPPDepsScannerServer struct {
}

func (*UnimplementedCPPDepsScannerServer) ProcessInputs(context.Context, *CPPProcessInputsRequest) (*CPPProcessInputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessInputs not implemented")
}
func (*UnimplementedCPPDepsScannerServer) Status(context.Context, *emptypb.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedCPPDepsScannerServer) Shutdown(context.Context, *emptypb.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (*UnimplementedCPPDepsScannerServer) Capabilities(context.Context, *emptypb.Empty) (*CapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Capabilities not implemented")
}

func RegisterCPPDepsScannerServer(s *grpc.Server, srv CPPDepsScannerServer) {
	s.RegisterService(&_CPPDepsScanner_serviceDesc, srv)
}

func _CPPDepsScanner_ProcessInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPPProcessInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPPDepsScannerServer).ProcessInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scandeps.CPPDepsScanner/ProcessInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPPDepsScannerServer).ProcessInputs(ctx, req.(*CPPProcessInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPPDepsScanner_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPPDepsScannerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scandeps.CPPDepsScanner/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPPDepsScannerServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPPDepsScanner_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPPDepsScannerServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scandeps.CPPDepsScanner/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPPDepsScannerServer).Shutdown(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPPDepsScanner_Capabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPPDepsScannerServer).Capabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scandeps.CPPDepsScanner/Capabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPPDepsScannerServer).Capabilities(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CPPDepsScanner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scandeps.CPPDepsScanner",
	HandlerType: (*CPPDepsScannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessInputs",
			Handler:    _CPPDepsScanner_ProcessInputs_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _CPPDepsScanner_Status_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _CPPDepsScanner_Shutdown_Handler,
		},
		{
			MethodName: "Capabilities",
			Handler:    _CPPDepsScanner_Capabilities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/scandeps/cppscandeps.proto",
}
