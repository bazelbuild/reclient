// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.1
// source: api/proxy/proxy.proto

package proxy

import (
	context "context"
	log "github.com/bazelbuild/reclient/api/log"
	stats "github.com/bazelbuild/reclient/api/stats"
	command "github.com/bazelbuild/remote-apis-sdks/go/api/command"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecutionStrategy_Value int32

const (
	ExecutionStrategy_UNSPECIFIED           ExecutionStrategy_Value = 0
	ExecutionStrategy_LOCAL                 ExecutionStrategy_Value = 1
	ExecutionStrategy_REMOTE                ExecutionStrategy_Value = 2
	ExecutionStrategy_REMOTE_LOCAL_FALLBACK ExecutionStrategy_Value = 3
	ExecutionStrategy_RACING                ExecutionStrategy_Value = 4
)

// Enum value maps for ExecutionStrategy_Value.
var (
	ExecutionStrategy_Value_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "LOCAL",
		2: "REMOTE",
		3: "REMOTE_LOCAL_FALLBACK",
		4: "RACING",
	}
	ExecutionStrategy_Value_value = map[string]int32{
		"UNSPECIFIED":           0,
		"LOCAL":                 1,
		"REMOTE":                2,
		"REMOTE_LOCAL_FALLBACK": 3,
		"RACING":                4,
	}
)

func (x ExecutionStrategy_Value) Enum() *ExecutionStrategy_Value {
	p := new(ExecutionStrategy_Value)
	*p = x
	return p
}

func (x ExecutionStrategy_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStrategy_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proxy_proxy_proto_enumTypes[0].Descriptor()
}

func (ExecutionStrategy_Value) Type() protoreflect.EnumType {
	return &file_api_proxy_proxy_proto_enumTypes[0]
}

func (x ExecutionStrategy_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStrategy_Value.Descriptor instead.
func (ExecutionStrategy_Value) EnumDescriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{12, 0}
}

type LocalExecutionOptions_LocalExecutionPlatform int32

const (
	LocalExecutionOptions_UNSPECIFIED LocalExecutionOptions_LocalExecutionPlatform = 0
	LocalExecutionOptions_DOCKER      LocalExecutionOptions_LocalExecutionPlatform = 1
)

// Enum value maps for LocalExecutionOptions_LocalExecutionPlatform.
var (
	LocalExecutionOptions_LocalExecutionPlatform_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "DOCKER",
	}
	LocalExecutionOptions_LocalExecutionPlatform_value = map[string]int32{
		"UNSPECIFIED": 0,
		"DOCKER":      1,
	}
)

func (x LocalExecutionOptions_LocalExecutionPlatform) Enum() *LocalExecutionOptions_LocalExecutionPlatform {
	p := new(LocalExecutionOptions_LocalExecutionPlatform)
	*p = x
	return p
}

func (x LocalExecutionOptions_LocalExecutionPlatform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocalExecutionOptions_LocalExecutionPlatform) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proxy_proxy_proto_enumTypes[1].Descriptor()
}

func (LocalExecutionOptions_LocalExecutionPlatform) Type() protoreflect.EnumType {
	return &file_api_proxy_proxy_proto_enumTypes[1]
}

func (x LocalExecutionOptions_LocalExecutionPlatform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocalExecutionOptions_LocalExecutionPlatform.Descriptor instead.
func (LocalExecutionOptions_LocalExecutionPlatform) EnumDescriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{13, 0}
}

type ShutdownRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	mi := &file_api_proxy_proxy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{0}
}

type ShutdownResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stats         *stats.Stats           `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	mi := &file_api_proxy_proxy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{1}
}

func (x *ShutdownResponse) GetStats() *stats.Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type GetStatusSummaryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatusSummaryRequest) Reset() {
	*x = GetStatusSummaryRequest{}
	mi := &file_api_proxy_proxy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusSummaryRequest) ProtoMessage() {}

func (x *GetStatusSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetStatusSummaryRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{2}
}

type GetStatusSummaryResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	CompletedActionStats map[string]int32       `protobuf:"bytes,1,rep,name=completed_action_stats,json=completedActionStats,proto3" json:"completed_action_stats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	RunningActions       int32                  `protobuf:"varint,2,opt,name=running_actions,json=runningActions,proto3" json:"running_actions,omitempty"`
	Qps                  int32                  `protobuf:"varint,3,opt,name=qps,proto3" json:"qps,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetStatusSummaryResponse) Reset() {
	*x = GetStatusSummaryResponse{}
	mi := &file_api_proxy_proxy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusSummaryResponse) ProtoMessage() {}

func (x *GetStatusSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetStatusSummaryResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{3}
}

func (x *GetStatusSummaryResponse) GetCompletedActionStats() map[string]int32 {
	if x != nil {
		return x.CompletedActionStats
	}
	return nil
}

func (x *GetStatusSummaryResponse) GetRunningActions() int32 {
	if x != nil {
		return x.RunningActions
	}
	return 0
}

func (x *GetStatusSummaryResponse) GetQps() int32 {
	if x != nil {
		return x.Qps
	}
	return 0
}

type GetRecordsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecordsRequest) Reset() {
	*x = GetRecordsRequest{}
	mi := &file_api_proxy_proxy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordsRequest) ProtoMessage() {}

func (x *GetRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordsRequest.ProtoReflect.Descriptor instead.
func (*GetRecordsRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{4}
}

type GetRecordsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*log.LogRecord       `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecordsResponse) Reset() {
	*x = GetRecordsResponse{}
	mi := &file_api_proxy_proxy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordsResponse) ProtoMessage() {}

func (x *GetRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordsResponse.ProtoReflect.Descriptor instead.
func (*GetRecordsResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{5}
}

func (x *GetRecordsResponse) GetRecords() []*log.LogRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type AddProxyEventsRequest struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	EventTimes    map[string]*command.TimeInterval `protobuf:"bytes,1,rep,name=event_times,json=eventTimes,proto3" json:"event_times,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProxyEventsRequest) Reset() {
	*x = AddProxyEventsRequest{}
	mi := &file_api_proxy_proxy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProxyEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProxyEventsRequest) ProtoMessage() {}

func (x *AddProxyEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProxyEventsRequest.ProtoReflect.Descriptor instead.
func (*AddProxyEventsRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{6}
}

func (x *AddProxyEventsRequest) GetEventTimes() map[string]*command.TimeInterval {
	if x != nil {
		return x.EventTimes
	}
	return nil
}

type AddProxyEventsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProxyEventsResponse) Reset() {
	*x = AddProxyEventsResponse{}
	mi := &file_api_proxy_proxy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProxyEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProxyEventsResponse) ProtoMessage() {}

func (x *AddProxyEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProxyEventsResponse.ProtoReflect.Descriptor instead.
func (*AddProxyEventsResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{7}
}

type RunRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Command          *command.Command       `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Labels           map[string]string      `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ExecutionOptions *ProxyExecutionOptions `protobuf:"bytes,3,opt,name=execution_options,json=executionOptions,proto3" json:"execution_options,omitempty"`
	Metadata         *Metadata              `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ToolchainInputs  []string               `protobuf:"bytes,5,rep,name=toolchain_inputs,json=toolchainInputs,proto3" json:"toolchain_inputs,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	mi := &file_api_proxy_proxy_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{8}
}

func (x *RunRequest) GetCommand() *command.Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *RunRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RunRequest) GetExecutionOptions() *ProxyExecutionOptions {
	if x != nil {
		return x.ExecutionOptions
	}
	return nil
}

func (x *RunRequest) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RunRequest) GetToolchainInputs() []string {
	if x != nil {
		return x.ToolchainInputs
	}
	return nil
}

type RunResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Stdout             []byte                 `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr             []byte                 `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Result             *command.CommandResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	ExecutionId        string                 `protobuf:"bytes,4,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	ActionLog          *log.LogRecord         `protobuf:"bytes,5,opt,name=action_log,json=actionLog,proto3" json:"action_log,omitempty"`
	RemoteFallbackInfo *RemoteFallbackInfo    `protobuf:"bytes,6,opt,name=remote_fallback_info,json=remoteFallbackInfo,proto3" json:"remote_fallback_info,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RunResponse) Reset() {
	*x = RunResponse{}
	mi := &file_api_proxy_proxy_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponse) ProtoMessage() {}

func (x *RunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponse.ProtoReflect.Descriptor instead.
func (*RunResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{9}
}

func (x *RunResponse) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *RunResponse) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *RunResponse) GetResult() *command.CommandResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RunResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *RunResponse) GetActionLog() *log.LogRecord {
	if x != nil {
		return x.ActionLog
	}
	return nil
}

func (x *RunResponse) GetRemoteFallbackInfo() *RemoteFallbackInfo {
	if x != nil {
		return x.RemoteFallbackInfo
	}
	return nil
}

type RemoteFallbackInfo struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	ExitCode      int32                             `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Stdout        []byte                            `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr        []byte                            `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
	ResultStatus  command.CommandResultStatus_Value `protobuf:"varint,4,opt,name=result_status,json=resultStatus,proto3,enum=cmd.CommandResultStatus_Value" json:"result_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteFallbackInfo) Reset() {
	*x = RemoteFallbackInfo{}
	mi := &file_api_proxy_proxy_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteFallbackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteFallbackInfo) ProtoMessage() {}

func (x *RemoteFallbackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteFallbackInfo.ProtoReflect.Descriptor instead.
func (*RemoteFallbackInfo) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{10}
}

func (x *RemoteFallbackInfo) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *RemoteFallbackInfo) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *RemoteFallbackInfo) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *RemoteFallbackInfo) GetResultStatus() command.CommandResultStatus_Value {
	if x != nil {
		return x.ResultStatus
	}
	return command.CommandResultStatus_Value(0)
}

type ProxyExecutionOptions struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	ExecutionStrategy      ExecutionStrategy_Value `protobuf:"varint,1,opt,name=execution_strategy,json=executionStrategy,proto3,enum=proxy.ExecutionStrategy_Value" json:"execution_strategy,omitempty"`
	RemoteExecutionOptions *RemoteExecutionOptions `protobuf:"bytes,2,opt,name=remote_execution_options,json=remoteExecutionOptions,proto3" json:"remote_execution_options,omitempty"`
	LocalExecutionOptions  *LocalExecutionOptions  `protobuf:"bytes,3,opt,name=local_execution_options,json=localExecutionOptions,proto3" json:"local_execution_options,omitempty"`
	CompareWithLocal       bool                    `protobuf:"varint,4,opt,name=compare_with_local,json=compareWithLocal,proto3" json:"compare_with_local,omitempty"`
	NumRetriesIfMismatched int32                   `protobuf:"varint,5,opt,name=num_retries_if_mismatched,json=numRetriesIfMismatched,proto3" json:"num_retries_if_mismatched,omitempty"`
	NumLocalReruns         int32                   `protobuf:"varint,6,opt,name=num_local_reruns,json=numLocalReruns,proto3" json:"num_local_reruns,omitempty"`
	NumRemoteReruns        int32                   `protobuf:"varint,7,opt,name=num_remote_reruns,json=numRemoteReruns,proto3" json:"num_remote_reruns,omitempty"`
	LogEnvironment         bool                    `protobuf:"varint,8,opt,name=log_environment,json=logEnvironment,proto3" json:"log_environment,omitempty"`
	IncludeActionLog       bool                    `protobuf:"varint,9,opt,name=include_action_log,json=includeActionLog,proto3" json:"include_action_log,omitempty"`
	ReclientTimeout        int32                   `protobuf:"varint,10,opt,name=reclient_timeout,json=reclientTimeout,proto3" json:"reclient_timeout,omitempty"`
	EnableAtomicDownloads  bool                    `protobuf:"varint,11,opt,name=enable_atomic_downloads,json=enableAtomicDownloads,proto3" json:"enable_atomic_downloads,omitempty"`
	DownloadRegex          string                  `protobuf:"bytes,12,opt,name=download_regex,json=downloadRegex,proto3" json:"download_regex,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProxyExecutionOptions) Reset() {
	*x = ProxyExecutionOptions{}
	mi := &file_api_proxy_proxy_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyExecutionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyExecutionOptions) ProtoMessage() {}

func (x *ProxyExecutionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyExecutionOptions.ProtoReflect.Descriptor instead.
func (*ProxyExecutionOptions) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{11}
}

func (x *ProxyExecutionOptions) GetExecutionStrategy() ExecutionStrategy_Value {
	if x != nil {
		return x.ExecutionStrategy
	}
	return ExecutionStrategy_UNSPECIFIED
}

func (x *ProxyExecutionOptions) GetRemoteExecutionOptions() *RemoteExecutionOptions {
	if x != nil {
		return x.RemoteExecutionOptions
	}
	return nil
}

func (x *ProxyExecutionOptions) GetLocalExecutionOptions() *LocalExecutionOptions {
	if x != nil {
		return x.LocalExecutionOptions
	}
	return nil
}

func (x *ProxyExecutionOptions) GetCompareWithLocal() bool {
	if x != nil {
		return x.CompareWithLocal
	}
	return false
}

func (x *ProxyExecutionOptions) GetNumRetriesIfMismatched() int32 {
	if x != nil {
		return x.NumRetriesIfMismatched
	}
	return 0
}

func (x *ProxyExecutionOptions) GetNumLocalReruns() int32 {
	if x != nil {
		return x.NumLocalReruns
	}
	return 0
}

func (x *ProxyExecutionOptions) GetNumRemoteReruns() int32 {
	if x != nil {
		return x.NumRemoteReruns
	}
	return 0
}

func (x *ProxyExecutionOptions) GetLogEnvironment() bool {
	if x != nil {
		return x.LogEnvironment
	}
	return false
}

func (x *ProxyExecutionOptions) GetIncludeActionLog() bool {
	if x != nil {
		return x.IncludeActionLog
	}
	return false
}

func (x *ProxyExecutionOptions) GetReclientTimeout() int32 {
	if x != nil {
		return x.ReclientTimeout
	}
	return 0
}

func (x *ProxyExecutionOptions) GetEnableAtomicDownloads() bool {
	if x != nil {
		return x.EnableAtomicDownloads
	}
	return false
}

func (x *ProxyExecutionOptions) GetDownloadRegex() string {
	if x != nil {
		return x.DownloadRegex
	}
	return ""
}

type ExecutionStrategy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionStrategy) Reset() {
	*x = ExecutionStrategy{}
	mi := &file_api_proxy_proxy_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStrategy) ProtoMessage() {}

func (x *ExecutionStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStrategy.ProtoReflect.Descriptor instead.
func (*ExecutionStrategy) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{12}
}

type LocalExecutionOptions struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Platform      LocalExecutionOptions_LocalExecutionPlatform `protobuf:"varint,1,opt,name=platform,proto3,enum=proxy.LocalExecutionOptions_LocalExecutionPlatform" json:"platform,omitempty"`
	DoNotCache    bool                                         `protobuf:"varint,2,opt,name=do_not_cache,json=doNotCache,proto3" json:"do_not_cache,omitempty"`
	AcceptCached  bool                                         `protobuf:"varint,3,opt,name=accept_cached,json=acceptCached,proto3" json:"accept_cached,omitempty"`
	Wrapper       string                                       `protobuf:"bytes,4,opt,name=wrapper,proto3" json:"wrapper,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalExecutionOptions) Reset() {
	*x = LocalExecutionOptions{}
	mi := &file_api_proxy_proxy_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalExecutionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalExecutionOptions) ProtoMessage() {}

func (x *LocalExecutionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalExecutionOptions.ProtoReflect.Descriptor instead.
func (*LocalExecutionOptions) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{13}
}

func (x *LocalExecutionOptions) GetPlatform() LocalExecutionOptions_LocalExecutionPlatform {
	if x != nil {
		return x.Platform
	}
	return LocalExecutionOptions_UNSPECIFIED
}

func (x *LocalExecutionOptions) GetDoNotCache() bool {
	if x != nil {
		return x.DoNotCache
	}
	return false
}

func (x *LocalExecutionOptions) GetAcceptCached() bool {
	if x != nil {
		return x.AcceptCached
	}
	return false
}

func (x *LocalExecutionOptions) GetWrapper() string {
	if x != nil {
		return x.Wrapper
	}
	return ""
}

type RemoteExecutionOptions struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	AcceptCached                 bool                   `protobuf:"varint,1,opt,name=accept_cached,json=acceptCached,proto3" json:"accept_cached,omitempty"`
	DoNotCache                   bool                   `protobuf:"varint,2,opt,name=do_not_cache,json=doNotCache,proto3" json:"do_not_cache,omitempty"`
	DownloadOutputs              bool                   `protobuf:"varint,3,opt,name=download_outputs,json=downloadOutputs,proto3" json:"download_outputs,omitempty"`
	Wrapper                      string                 `protobuf:"bytes,5,opt,name=wrapper,proto3" json:"wrapper,omitempty"`
	CanonicalizeWorkingDir       bool                   `protobuf:"varint,6,opt,name=canonicalize_working_dir,json=canonicalizeWorkingDir,proto3" json:"canonicalize_working_dir,omitempty"`
	PreserveUnchangedOutputMtime bool                   `protobuf:"varint,7,opt,name=preserve_unchanged_output_mtime,json=preserveUnchangedOutputMtime,proto3" json:"preserve_unchanged_output_mtime,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *RemoteExecutionOptions) Reset() {
	*x = RemoteExecutionOptions{}
	mi := &file_api_proxy_proxy_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteExecutionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteExecutionOptions) ProtoMessage() {}

func (x *RemoteExecutionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteExecutionOptions.ProtoReflect.Descriptor instead.
func (*RemoteExecutionOptions) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{14}
}

func (x *RemoteExecutionOptions) GetAcceptCached() bool {
	if x != nil {
		return x.AcceptCached
	}
	return false
}

func (x *RemoteExecutionOptions) GetDoNotCache() bool {
	if x != nil {
		return x.DoNotCache
	}
	return false
}

func (x *RemoteExecutionOptions) GetDownloadOutputs() bool {
	if x != nil {
		return x.DownloadOutputs
	}
	return false
}

func (x *RemoteExecutionOptions) GetWrapper() string {
	if x != nil {
		return x.Wrapper
	}
	return ""
}

func (x *RemoteExecutionOptions) GetCanonicalizeWorkingDir() bool {
	if x != nil {
		return x.CanonicalizeWorkingDir
	}
	return false
}

func (x *RemoteExecutionOptions) GetPreserveUnchangedOutputMtime() bool {
	if x != nil {
		return x.PreserveUnchangedOutputMtime
	}
	return false
}

type Metadata struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	EventTimes    map[string]*command.TimeInterval `protobuf:"bytes,1,rep,name=event_times,json=eventTimes,proto3" json:"event_times,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Environment   []string                         `protobuf:"bytes,2,rep,name=environment,proto3" json:"environment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_api_proxy_proxy_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_proxy_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_api_proxy_proxy_proto_rawDescGZIP(), []int{15}
}

func (x *Metadata) GetEventTimes() map[string]*command.TimeInterval {
	if x != nil {
		return x.EventTimes
	}
	return nil
}

func (x *Metadata) GetEnvironment() []string {
	if x != nil {
		return x.Environment
	}
	return nil
}

var File_api_proxy_proxy_proto protoreflect.FileDescriptor

var file_api_proxy_proxy_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x1a, 0x1c,
	0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x6f, 0x67, 0x2f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x10, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8f, 0x02, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x71, 0x70, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x13,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x67,
	0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a,
	0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x1a, 0x50, 0x0a, 0x0f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x18,
	0x0a, 0x16, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x0a, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x35, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x6f, 0x6c, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x02, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74,
	0x64, 0x65, 0x72, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x12, 0x4b, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xa6, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64,
	0x65, 0x72, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb5, 0x05, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x57, 0x0a, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x17, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x39,
	0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x66,
	0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x49, 0x66, 0x4d,
	0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x72,
	0x75, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6e, 0x75, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x6f, 0x6d,
	0x69, 0x63, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x22, 0x6b, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x56, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45,
	0x4d, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x43, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x22, 0x80, 0x02,
	0x0a, 0x15, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x6f, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x16, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x01,
	0x22, 0xab, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x61, 0x6e, 0x6f, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x61, 0x6e, 0x6f, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x72, 0x12, 0x45, 0x0a, 0x1f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x75, 0x6e,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x55, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4d, 0x74, 0x69, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xc0,
	0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0b, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x50, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x32, 0x80, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x35,
	0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0x9d, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x43,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0x5f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x7a, 0x65, 0x6c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x72,
	0x65, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_proxy_proxy_proto_rawDescOnce sync.Once
	file_api_proxy_proxy_proto_rawDescData []byte
)

func file_api_proxy_proxy_proto_rawDescGZIP() []byte {
	file_api_proxy_proxy_proto_rawDescOnce.Do(func() {
		file_api_proxy_proxy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proxy_proxy_proto_rawDesc), len(file_api_proxy_proxy_proto_rawDesc)))
	})
	return file_api_proxy_proxy_proto_rawDescData
}

var file_api_proxy_proxy_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_proxy_proxy_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_api_proxy_proxy_proto_goTypes = []any{
	(ExecutionStrategy_Value)(0),                      // 0: proxy.ExecutionStrategy.Value
	(LocalExecutionOptions_LocalExecutionPlatform)(0), // 1: proxy.LocalExecutionOptions.LocalExecutionPlatform
	(*ShutdownRequest)(nil),                           // 2: proxy.ShutdownRequest
	(*ShutdownResponse)(nil),                          // 3: proxy.ShutdownResponse
	(*GetStatusSummaryRequest)(nil),                   // 4: proxy.GetStatusSummaryRequest
	(*GetStatusSummaryResponse)(nil),                  // 5: proxy.GetStatusSummaryResponse
	(*GetRecordsRequest)(nil),                         // 6: proxy.GetRecordsRequest
	(*GetRecordsResponse)(nil),                        // 7: proxy.GetRecordsResponse
	(*AddProxyEventsRequest)(nil),                     // 8: proxy.AddProxyEventsRequest
	(*AddProxyEventsResponse)(nil),                    // 9: proxy.AddProxyEventsResponse
	(*RunRequest)(nil),                                // 10: proxy.RunRequest
	(*RunResponse)(nil),                               // 11: proxy.RunResponse
	(*RemoteFallbackInfo)(nil),                        // 12: proxy.RemoteFallbackInfo
	(*ProxyExecutionOptions)(nil),                     // 13: proxy.ProxyExecutionOptions
	(*ExecutionStrategy)(nil),                         // 14: proxy.ExecutionStrategy
	(*LocalExecutionOptions)(nil),                     // 15: proxy.LocalExecutionOptions
	(*RemoteExecutionOptions)(nil),                    // 16: proxy.RemoteExecutionOptions
	(*Metadata)(nil),                                  // 17: proxy.Metadata
	nil,                                               // 18: proxy.GetStatusSummaryResponse.CompletedActionStatsEntry
	nil,                                               // 19: proxy.AddProxyEventsRequest.EventTimesEntry
	nil,                                               // 20: proxy.RunRequest.LabelsEntry
	nil,                                               // 21: proxy.Metadata.EventTimesEntry
	(*stats.Stats)(nil),                               // 22: stats.Stats
	(*log.LogRecord)(nil),                             // 23: log.LogRecord
	(*command.Command)(nil),                           // 24: cmd.Command
	(*command.CommandResult)(nil),                     // 25: cmd.CommandResult
	(command.CommandResultStatus_Value)(0),            // 26: cmd.CommandResultStatus.Value
	(*command.TimeInterval)(nil),                      // 27: cmd.TimeInterval
}
var file_api_proxy_proxy_proto_depIdxs = []int32{
	22, // 0: proxy.ShutdownResponse.stats:type_name -> stats.Stats
	18, // 1: proxy.GetStatusSummaryResponse.completed_action_stats:type_name -> proxy.GetStatusSummaryResponse.CompletedActionStatsEntry
	23, // 2: proxy.GetRecordsResponse.records:type_name -> log.LogRecord
	19, // 3: proxy.AddProxyEventsRequest.event_times:type_name -> proxy.AddProxyEventsRequest.EventTimesEntry
	24, // 4: proxy.RunRequest.command:type_name -> cmd.Command
	20, // 5: proxy.RunRequest.labels:type_name -> proxy.RunRequest.LabelsEntry
	13, // 6: proxy.RunRequest.execution_options:type_name -> proxy.ProxyExecutionOptions
	17, // 7: proxy.RunRequest.metadata:type_name -> proxy.Metadata
	25, // 8: proxy.RunResponse.result:type_name -> cmd.CommandResult
	23, // 9: proxy.RunResponse.action_log:type_name -> log.LogRecord
	12, // 10: proxy.RunResponse.remote_fallback_info:type_name -> proxy.RemoteFallbackInfo
	26, // 11: proxy.RemoteFallbackInfo.result_status:type_name -> cmd.CommandResultStatus.Value
	0,  // 12: proxy.ProxyExecutionOptions.execution_strategy:type_name -> proxy.ExecutionStrategy.Value
	16, // 13: proxy.ProxyExecutionOptions.remote_execution_options:type_name -> proxy.RemoteExecutionOptions
	15, // 14: proxy.ProxyExecutionOptions.local_execution_options:type_name -> proxy.LocalExecutionOptions
	1,  // 15: proxy.LocalExecutionOptions.platform:type_name -> proxy.LocalExecutionOptions.LocalExecutionPlatform
	21, // 16: proxy.Metadata.event_times:type_name -> proxy.Metadata.EventTimesEntry
	27, // 17: proxy.AddProxyEventsRequest.EventTimesEntry.value:type_name -> cmd.TimeInterval
	27, // 18: proxy.Metadata.EventTimesEntry.value:type_name -> cmd.TimeInterval
	10, // 19: proxy.Commands.RunCommand:input_type -> proxy.RunRequest
	2,  // 20: proxy.Commands.Shutdown:input_type -> proxy.ShutdownRequest
	6,  // 21: proxy.Stats.GetRecords:input_type -> proxy.GetRecordsRequest
	8,  // 22: proxy.Stats.AddProxyEvents:input_type -> proxy.AddProxyEventsRequest
	4,  // 23: proxy.Status.GetStatusSummary:input_type -> proxy.GetStatusSummaryRequest
	11, // 24: proxy.Commands.RunCommand:output_type -> proxy.RunResponse
	3,  // 25: proxy.Commands.Shutdown:output_type -> proxy.ShutdownResponse
	7,  // 26: proxy.Stats.GetRecords:output_type -> proxy.GetRecordsResponse
	9,  // 27: proxy.Stats.AddProxyEvents:output_type -> proxy.AddProxyEventsResponse
	5,  // 28: proxy.Status.GetStatusSummary:output_type -> proxy.GetStatusSummaryResponse
	24, // [24:29] is the sub-list for method output_type
	19, // [19:24] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_api_proxy_proxy_proto_init() }
func file_api_proxy_proxy_proto_init() {
	if File_api_proxy_proxy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proxy_proxy_proto_rawDesc), len(file_api_proxy_proxy_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_api_proxy_proxy_proto_goTypes,
		DependencyIndexes: file_api_proxy_proxy_proto_depIdxs,
		EnumInfos:         file_api_proxy_proxy_proto_enumTypes,
		MessageInfos:      file_api_proxy_proxy_proto_msgTypes,
	}.Build()
	File_api_proxy_proxy_proto = out.File
	file_api_proxy_proxy_proto_goTypes = nil
	file_api_proxy_proxy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CommandsClient is the client API for Commands service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommandsClient interface {
	RunCommand(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type commandsClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandsClient(cc grpc.ClientConnInterface) CommandsClient {
	return &commandsClient{cc}
}

func (c *commandsClient) RunCommand(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/proxy.Commands/RunCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandsClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/proxy.Commands/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandsServer is the server API for Commands service.
type CommandsServer interface {
	RunCommand(context.Context, *RunRequest) (*RunResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
}

// UnimplementedCommandsServer can be embedded to have forward compatible implementations.
type UnimplementedCommandsServer struct {
}

func (*UnimplementedCommandsServer) RunCommand(context.Context, *RunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCommand not implemented")
}
func (*UnimplementedCommandsServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}

func RegisterCommandsServer(s *grpc.Server, srv CommandsServer) {
	s.RegisterService(&_Commands_serviceDesc, srv)
}

func _Commands_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandsServer).RunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Commands/RunCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandsServer).RunCommand(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commands_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandsServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Commands/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandsServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Commands_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.Commands",
	HandlerType: (*CommandsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunCommand",
			Handler:    _Commands_RunCommand_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Commands_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proxy/proxy.proto",
}

// StatsClient is the client API for Stats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatsClient interface {
	GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (*GetRecordsResponse, error)
	AddProxyEvents(ctx context.Context, in *AddProxyEventsRequest, opts ...grpc.CallOption) (*AddProxyEventsResponse, error)
}

type statsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsClient(cc grpc.ClientConnInterface) StatsClient {
	return &statsClient{cc}
}

func (c *statsClient) GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (*GetRecordsResponse, error) {
	out := new(GetRecordsResponse)
	err := c.cc.Invoke(ctx, "/proxy.Stats/GetRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) AddProxyEvents(ctx context.Context, in *AddProxyEventsRequest, opts ...grpc.CallOption) (*AddProxyEventsResponse, error) {
	out := new(AddProxyEventsResponse)
	err := c.cc.Invoke(ctx, "/proxy.Stats/AddProxyEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsServer is the server API for Stats service.
type StatsServer interface {
	GetRecords(context.Context, *GetRecordsRequest) (*GetRecordsResponse, error)
	AddProxyEvents(context.Context, *AddProxyEventsRequest) (*AddProxyEventsResponse, error)
}

// UnimplementedStatsServer can be embedded to have forward compatible implementations.
type UnimplementedStatsServer struct {
}

func (*UnimplementedStatsServer) GetRecords(context.Context, *GetRecordsRequest) (*GetRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecords not implemented")
}
func (*UnimplementedStatsServer) AddProxyEvents(context.Context, *AddProxyEventsRequest) (*AddProxyEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProxyEvents not implemented")
}

func RegisterStatsServer(s *grpc.Server, srv StatsServer) {
	s.RegisterService(&_Stats_serviceDesc, srv)
}

func _Stats_GetRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).GetRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Stats/GetRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).GetRecords(ctx, req.(*GetRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_AddProxyEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProxyEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).AddProxyEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Stats/AddProxyEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).AddProxyEvents(ctx, req.(*AddProxyEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stats_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.Stats",
	HandlerType: (*StatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecords",
			Handler:    _Stats_GetRecords_Handler,
		},
		{
			MethodName: "AddProxyEvents",
			Handler:    _Stats_AddProxyEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proxy/proxy.proto",
}

// StatusClient is the client API for Status service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatusClient interface {
	GetStatusSummary(ctx context.Context, in *GetStatusSummaryRequest, opts ...grpc.CallOption) (*GetStatusSummaryResponse, error)
}

type statusClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusClient(cc grpc.ClientConnInterface) StatusClient {
	return &statusClient{cc}
}

func (c *statusClient) GetStatusSummary(ctx context.Context, in *GetStatusSummaryRequest, opts ...grpc.CallOption) (*GetStatusSummaryResponse, error) {
	out := new(GetStatusSummaryResponse)
	err := c.cc.Invoke(ctx, "/proxy.Status/GetStatusSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServer is the server API for Status service.
type StatusServer interface {
	GetStatusSummary(context.Context, *GetStatusSummaryRequest) (*GetStatusSummaryResponse, error)
}

// UnimplementedStatusServer can be embedded to have forward compatible implementations.
type UnimplementedStatusServer struct {
}

func (*UnimplementedStatusServer) GetStatusSummary(context.Context, *GetStatusSummaryRequest) (*GetStatusSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusSummary not implemented")
}

func RegisterStatusServer(s *grpc.Server, srv StatusServer) {
	s.RegisterService(&_Status_serviceDesc, srv)
}

func _Status_GetStatusSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).GetStatusSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Status/GetStatusSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).GetStatusSummary(ctx, req.(*GetStatusSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Status_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.Status",
	HandlerType: (*StatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatusSummary",
			Handler:    _Status_GetStatusSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proxy/proxy.proto",
}
